# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-10 20:08
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import experchat.models.users


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0004_user_toc_and_privacy_policy_accepted'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='title')),
                ('start_time', models.TimeField(verbose_name='start time')),
                ('end_time', models.TimeField(verbose_name='end time')),
                ('timezone', models.CharField(max_length=64, verbose_name='timezone')),
            ],
        ),
        migrations.CreateModel(
            name='DailyExpertStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='created timestamp')),
                ('modified_timestamp', models.DateTimeField(auto_now=True, verbose_name='modified timestamp')),
                ('profile_visits', models.PositiveIntegerField(default=0, verbose_name='profile visits')),
                ('sessions_count', models.PositiveIntegerField(default=0, verbose_name='sessions count')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Date')),
            ],
            options={
                'ordering': ('-date', 'expert'),
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
            ],
            options={
                'db_table': 'domains_domain',
            },
        ),
        migrations.CreateModel(
            name='EcDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='created timestamp')),
                ('modified_timestamp', models.DateTimeField(auto_now=True, verbose_name='modified timestamp')),
                ('device_name', models.CharField(max_length=50, verbose_name='Device Name')),
                ('device_type', models.CharField(db_index=True, max_length=20, verbose_name='Device Type')),
                ('device_sub_type', models.CharField(max_length=20, verbose_name='Device Subtype')),
                ('device_id', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='Device Id')),
                ('device_token', models.CharField(db_index=True, max_length=255, verbose_name='Device Token')),
                ('device_os', models.CharField(max_length=50, verbose_name='Device Os')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'ACTIVE'), (2, 'INACTIVE')], default=1, verbose_name='Device Status')),
            ],
            options={
                'db_table': 'devices_device',
                'ordering': ['-created_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EcSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='created timestamp')),
                ('modified_timestamp', models.DateTimeField(auto_now=True, verbose_name='modified timestamp')),
                ('start_timestamp', models.DateTimeField(auto_now_add=True)),
                ('end_timestamp', models.DateTimeField(blank=True, null=True)),
                ('tokbox_session_id', models.CharField(max_length=100)),
                ('tokbox_session_length', models.IntegerField(default=0, help_text='Total session time (in seconds).')),
                ('scheduled_duration', models.IntegerField(default=10, verbose_name='Scheduled Duration')),
                ('revenue', models.FloatField(default=0)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('call_status', models.PositiveIntegerField(choices=[(2, 'ACCEPTED'), (4, 'COMPLETED'), (3, 'DECLINED'), (5, 'DELAYED'), (1, 'INITIATED'), (6, 'SCHEDULED')], default=1)),
                ('details', models.TextField(blank=True, default='', max_length=500, null=True, verbose_name='Session Detail')),
                ('scheduled_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='call schedule datetime')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted')),
                ('extended_duration', models.IntegerField(default=0, verbose_name='Extended Duration')),
            ],
            options={
                'db_table': 'experchat_sessions_session',
                'ordering': ['-start_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='created timestamp')),
                ('modified_timestamp', models.DateTimeField(auto_now=True, verbose_name='modified timestamp')),
                ('userbase', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user base')),
                ('expert_uid', models.CharField(max_length=5, null=True, unique=True)),
                ('account_id', models.IntegerField(default=0)),
                ('avg_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('num_rating', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'users_expert',
            },
        ),
        migrations.CreateModel(
            name='ExpertProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='created timestamp')),
                ('modified_timestamp', models.DateTimeField(auto_now=True, verbose_name='modified timestamp')),
                ('headline', models.CharField(max_length=50, verbose_name='profile headline')),
                ('summary', models.CharField(max_length=1000, verbose_name='profile summary')),
                ('my_experience', models.TextField(verbose_name='experience description')),
                ('year_of_experience', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='experience in years')),
                ('educational_background', models.TextField(blank=True, null=True, verbose_name='educational background')),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='experchat.Expert', verbose_name='expert')),
            ],
            options={
                'db_table': 'users_expertprofile',
            },
        ),
        migrations.CreateModel(
            name='SessionPricing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='created timestamp')),
                ('modified_timestamp', models.DateTimeField(auto_now=True, verbose_name='modified timestamp')),
                ('session_length', models.PositiveIntegerField(default=0, verbose_name='session length')),
                ('price', models.PositiveIntegerField(default=0, verbose_name='session price')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SessionRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveSmallIntegerField(choices=[(5, 'FIVE'), (4, 'FOUR'), (1, 'ONE'), (3, 'THREE'), (2, 'TWO')], verbose_name='overall rating')),
                ('knowledge_rating', models.PositiveSmallIntegerField(blank=True, choices=[(5, 'FIVE'), (4, 'FOUR'), (1, 'ONE'), (3, 'THREE'), (2, 'TWO')], null=True, verbose_name='knowledge rating')),
                ('communication_rating', models.PositiveSmallIntegerField(blank=True, choices=[(5, 'FIVE'), (4, 'FOUR'), (1, 'ONE'), (3, 'THREE'), (2, 'TWO')], null=True, verbose_name='communication rating')),
                ('professionalism_rating', models.PositiveSmallIntegerField(blank=True, choices=[(5, 'FIVE'), (4, 'FOUR'), (1, 'ONE'), (3, 'THREE'), (2, 'TWO')], null=True, verbose_name='professionalism rating')),
                ('text_review', models.TextField(default='', max_length=1000, verbose_name='text review')),
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='created timestamp')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='experchat.EcSession', verbose_name='session')),
            ],
            options={
                'ordering': ['-created_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tags', to='experchat.Domain', verbose_name='tag')),
            ],
            options={
                'db_table': 'domains_tag',
                'ordering': ('domain',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='created timestamp')),
                ('modified_timestamp', models.DateTimeField(auto_now=True, verbose_name='modified timestamp')),
                ('userbase', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user base')),
                ('display_name', models.CharField(default='', max_length=100, verbose_name='display name')),
            ],
            options={
                'db_table': 'users_user',
            },
        ),
        migrations.CreateModel(
            name='UserMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='created timestamp')),
                ('modified_timestamp', models.DateTimeField(auto_now=True, verbose_name='modified timestamp')),
                ('media', models.FileField(upload_to=experchat.models.users.get_file_path)),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video')], max_length=20)),
                ('title', models.CharField(default='', max_length=100)),
                ('description', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(1000)])),
                ('is_primary', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medias', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medias', to='experchat.ExpertProfile', verbose_name='profile')),
            ],
            options={
                'db_table': 'users_media',
                'verbose_name': 'User Media',
            },
        ),
        migrations.CreateModel(
            name='WeekDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], unique=True, verbose_name='Week Days')),
            ],
        ),
        migrations.AddField(
            model_name='expertprofile',
            name='tags',
            field=models.ManyToManyField(related_name='expert_profiles', to='experchat.Tag'),
        ),
        migrations.AddField(
            model_name='ecsession',
            name='expert',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='experchat.Expert', verbose_name='Expert Id'),
        ),
        migrations.AddField(
            model_name='ecsession',
            name='expert_device',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='expert_device_sessions', to='experchat.EcDevice', verbose_name='Expert Device'),
        ),
        migrations.AddField(
            model_name='ecsession',
            name='expert_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='experchat.ExpertProfile', verbose_name='Expert Profile Id'),
        ),
        migrations.AddField(
            model_name='ecsession',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ecsession',
            name='user_device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_device_sessions', to='experchat.EcDevice', verbose_name='User Device'),
        ),
        migrations.AddField(
            model_name='ecdevice',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dailyexpertstats',
            name='expert',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_stats', to='experchat.Expert', verbose_name='expert'),
        ),
        migrations.AddField(
            model_name='calendar',
            name='expert',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendars', to='experchat.Expert', verbose_name='expert'),
        ),
        migrations.AddField(
            model_name='calendar',
            name='week_days',
            field=models.ManyToManyField(to='experchat.WeekDay', verbose_name='week days'),
        ),
    ]
